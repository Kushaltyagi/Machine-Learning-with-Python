# -*- coding: utf-8 -*-
"""Panda Tutorial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12NO3pjsCMJhn7aSk0iWbdkmMj9WEjs4G

Pandas Library:
Useful for Data Processing and Analysis

Pandas Data frame:
Pandas Dataframe is a two-dimenional tabular datastructure labeled axes(rows and columns
"""

# importing the pandas library
import pandas as pd
import numpy as np

"""Create a Pandas DataFrame"""

# importing the boston house price data
from sklearn.datasets import fetch_california_housing

housing = fetch_california_housing()
type(housing)

print(housing)

# pandas DataFrame
housing_df = pd.DataFrame(housing.data, columns = housing.feature_names)
housing_df.head()

housing_df.shape

"""Importing the data from a CSV file to a pandas DataFrame"""

# csv file to pandas dataframe
diabetes_df = pd.read_csv('/content/diabetes.csv')
type(diabetes_df)

diabetes_df.head()

diabetes_df.shape

"""Exporting a Dataframe to CSV File"""

housing_df.to_csv('california_housing.csv')

"""Exporting Pandas Dataframe to an excel file:
df.to_excel('filename')
"""

# Create a dataframe with random values
random_df = pd.DataFrame(np.random.randint(10,20,(10,20)))
random_df.head()

"""Inspecting a DataFrame"""

#finding number of rows and columns
housing_df.shape

# first 5 rows in a DataFrame
housing_df.head()

# last 5 rows of a DataFrame
housing_df.tail()

# Informations about the DataFrame
housing_df.info()

# Finding the number of missing values
housing_df.isnull().sum()

# counting the values based on labels
diabetes_df.value_counts('Outcome')
housing_df.value_counts('HouseAge')

# Group values based on the mean
diabetes_df.groupby('Outcome').mean()

"""Statistical Measures"""

# count or number of values
housing_df.count()

# mean value - column wise
housing_df.mean()

# standard deviation - column wise
housing_df.std()

# All the statistical measure in one go
housing_df.describe()

"""Manipulating a DataFrame"""

# adding a column to dataframe
housing_df['Prices'] = housing.target
housing_df.head()

# removing a row
housing_df.drop(index=0, axis=0)

# drop a column
housing_df.drop(columns='AveOccup', axis=1)

# locating a row using the index value
housing_df.iloc[3]

# locating a specific column
print(housing_df.iloc[:,0]) # Prints the first column
print(housing_df.iloc[:,1]) # Prints the second column
print(housing_df.iloc[:,-1]) # Prints the last column

"""Correlation:
  1. Positive Correlation
  2. Negative Correlation
"""

housing_df.corr()