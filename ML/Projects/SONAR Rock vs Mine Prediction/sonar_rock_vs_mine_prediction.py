# -*- coding: utf-8 -*-
"""SONAR Rock vs Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fInCGhZyJUbFQ_4vxg10Ei9k-niHgVVO

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score # use to find accuracy of our model

"""Data Collection and Data Processing"""

# loading the dataset to a panda DataFrame
sonar_data = pd.read_csv('/content/sonar_data.csv', header = None)
sonar_data.head()

# number of rows and columns
sonar_data.shape

# describe provides statistical measures of the data
sonar_data.describe()

sonar_data[60].value_counts()

"""*   M Represent Mine
*   R Represent Rock
"""

sonar_data.groupby(60).mean()

"""Separating Data and Labels"""

X = sonar_data.drop(columns = 60, axis = 1)
Y = sonar_data[60]
print(X)
print(Y)

"""Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.1, stratify = Y, random_state = 1)
# Stratify means our data will be splitted based on equal number of rock and mine in training data
print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

"""Model Training

*  Using Logistic Regression Model


"""

model = LogisticRegression()

# training the logistic Regression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on training data
X_train_prediction = model.predict(X_train) # X_train_prediction is result of training data
training_data_accuracy = accuracy_score(X_train_prediction, Y_train) # comparing result of training data with actual data

print('Accuracy of training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy prediction of test data : ', test_data_accuracy)

"""Making a Predictive System"""

input_data = (0.0115,0.0150,0.0136,0.0076,0.0211,0.1058,0.1023,0.0440,0.0931,0.0734,0.0740,0.0622,0.1055,0.1183,0.1721,0.2584,0.3232,0.3817,0.4243,0.4217,0.4449,0.4075,0.3306,0.4012,0.4466,0.5218,0.7552,0.9503,1.0000,0.9084,0.8283,0.7571,0.7262,0.6152,0.5680,0.5757,0.5324,0.3672,0.1669,0.0866,0.0646,0.1891,0.2683,0.2887,0.2341,0.1668,0.1015,0.1195,0.0704,0.0167,0.0107,0.0091,0.0016,0.0084,0.0064,0.0026,0.0029,0.0037,0.0070,0.0041)

# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshaping the np array as we are predicting for one instance  to match our taining data
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

print(prediction)

if(prediction[0] == 'R'):
  print('The object is a Rock')
else:
  print('The object is a Mine')

